/*
 * An extended PingPong example where Pong can handle multiple Pings
 *
 */
module MultiPingPong;

data PingMsg = Fine
             | HelloPing 
             | ByePing 
             ;

data PongMsg = NoMsg 
         | Hello(Ping)
         | HowAreYou
         | ByePong
         ;

interface Ping {
    Unit ping(PingMsg m);
}

interface Pong {
    PongSession hello(Ping ping);
}

interface PongSession {
    Unit pong(PongMsg m);
}

class PingImpl(Pong pong) implements Ping {
    PongSession pongSession;
    Unit run(){
      Fut<PongSession> fu = pong!hello(this);
      pongSession = fu.get; 
    }

    Unit ping(PingMsg msg){
      PongMsg reply = case msg {
         HelloPing => HowAreYou;
         Fine => ByePong; 
         ByePing => NoMsg;
      };
      
      if (reply != NoMsg) {
         Fut<Unit> fu = pongSession!pong(reply);
      	 fu.get;
      }
     }
} 

class PongSessionImpl(Ping ping, PongIntern pong) implements PongSession {
    // init block
    {
       ping!ping(HelloPing);
    }
    
    Unit pong(PongMsg msg){
       if (msg == HowAreYou) {
           ping!ping(Fine);
       } else {
           ping!ping(ByePing);
           pong.sessionFinished(this);
       }
    } 
}

interface PongIntern {
    Unit sessionFinished(PongSession s);
}

class PongImpl implements Pong, PongIntern {
    List<PongSession> sessions = EmptyList();
    PongSession hello(Ping ping) {
       PongSession s = new local PongSessionImpl(ping,this);
       sessions = appendRight(sessions,s);
       return s;
    }
    
    Unit sessionFinished(PongSession s) {
        sessions = without(sessions,s);
    }
}

{
    Pong pong = new PongImpl();
    Int i = 0;
    while (i < 100) {
        new PingImpl(pong);
        i = i + 1;
    }
}