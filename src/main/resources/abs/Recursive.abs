module Recursive;

interface Ainterface {
	Int recursive_m(Int i);
}
	
interface Binterface{
	Int  compute( );
}
	
class A implements Ainterface{

	Int recursive_m(Int i){
		if (i>0){
			this.recursive_m(i - 1);
		}
		else{
			B computation = new B ( );
			Fut<Int> f = computation ! compute( );
			await f ?;
		}
		return 0;
	}

}
	
class B implements Binterface {

	Int compute( ){
		Int result = 0;
		/*do some work */
		return result;
	}
	
}
	
{ // Main block:
	Int i = 0;
	A master = new A ( );
	List<Fut<Int>> futures = EmptyList;
	
	while (i < 5){
		Fut<Int> f = master ! recursive_m (2);
		futures = Cons( f, futures );
	}
	
	while ( futures != EmptyList ){
	
		Fut<Int> f = head(futures);
		futures = tail(futures);
		f.get ;
	}
}